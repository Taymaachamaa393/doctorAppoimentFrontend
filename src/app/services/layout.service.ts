import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { isPlatformBrowser } from '@angular/common';

@Injectable({
  providedIn: 'root'
})
export class LayoutService {

  private isCollapsedSubject = new BehaviorSubject<boolean>(false); // ุญุงูุฉ ุงูุทู/ุงูุชูุณูุน
  isCollapsed$ = this.isCollapsedSubject.asObservable();

  private isSidebarActiveSubject = new BehaviorSubject<boolean>(false); // ูู ูุณุชุฎุฏู window ููุง
  isSidebarActive$ = this.isSidebarActiveSubject.asObservable();

  constructor(@Inject(PLATFORM_ID) private platformId: Object) {
       // ุงูุชุญูู ูู ูุฌูุฏ ุงููุงุฆู window
    if (isPlatformBrowser(this.platformId)) {
      // ูููููุง ุงูุขู ุงุณุชุฎุฏุงู window ูุฃูู ูู ุจูุฆุฉ ุงููุชุตูุญ ููุท
      const isLargeScreen = window.innerWidth >= 992;
      this.isSidebarActiveSubject.next(isLargeScreen);

      window.addEventListener('resize', this.updateSidebarState.bind(this));  // ูุฑุงูุจุฉ ุชุบููุฑ ุญุฌู ุงูุดุงุดุฉ
    }
  }
   
   
    
  
        // this.updateSidebarState(); // ุชุญุฏูุซ ุญุงูุฉ ุงููุดุงุท ุจูุงุกู ุนูู ุญุฌู ุงูุดุงุดุฉ ุนูุฏ ุงูุชุญููู
  
  
  
    
    // window.addEventListener('resize', this.updateSidebarState.bind(this));
//     1. ุงูุชุญูู ูู ูุฌูุฏ window
// ูููููุง ุงูุชุญูู ูู ูุฌูุฏ ุงููุงุฆู window ูุจู ุงุณุชุฎุฏุงูู. ุฅุฐุง ูุงู window ุบูุฑ ูุนุฑู (ูู ุจูุฆุฉ SSR)ุ ูููููุง ุชุฌูุจ ุชูููุฐ ุงูููุฏ ุงููุฑุชุจุท ุจู.

  toggleCollapse(): void {
    this.isCollapsedSubject.next(!this.isCollapsedSubject.value); // ุชุจุฏูู ุญุงูุฉ ุงูุทู/ุงูุชูุณูุน
  }
  
  toggleSidebar(): void {
    this.isSidebarActiveSubject.next(!this.isSidebarActiveSubject.value); // ุชุจุฏูู ุญุงูุฉ ุงููุดุงุท
  }

  setSidebarActive(status: boolean): void {
    this.isSidebarActiveSubject.next(status);
  }

  setCollapsed(status: boolean): void {
    this.isCollapsedSubject.next(status);
  }

  private updateSidebarState(): void {
    if (isPlatformBrowser(this.platformId)) {
      const isLargeScreen = window.innerWidth >= 992;
      this.isSidebarActiveSubject.next(isLargeScreen); // ุชุญุฏูุซ ุญุงูุฉ ุงููุดุงุท ุจูุงุกู ุนูู ุญุฌู ุงูุดุงุดุฉ
    }
  }

}



// ๐ ุชุญููู ุงููุดููุฉ
// HeaderComponent ู SidebarComponent ูุชุงุจุนุงู ุญุฌู ุงูุดุงุดุฉ ุจุดูู ูููุตู
// ูู ูุงุญุฏ ููููุง ูุญุชูู ุนูู MediaMatcher ู isSmallScreen!
// ูุฐุง ูุคุฏู ุฅูู ุชุนุงุฑุถ ูู ุชุญุฏูุซ isActive ููุฏ ูุง ูุนูู ุฅุฎูุงุก ุงูุณูุฏุจุงุฑ ููุง ุชุชููุน.
// ุนุฏู ูุฒุงููุฉ isActive ูุน isCollapsed ูู LayoutService
// ุนูุฏูุง ูุชู ุชุญุฏูุซ isActive ูู SidebarComponentุ ูุง ูุชู ุฅุจูุงุบ HeaderComponent ุจุฐูู ูุงูุนูุณ ุตุญูุญ.



//  ุงูุญู ุงูุฃูุซู: ุงุณุชุฎุฏุงู LayoutService ููุฒุงููุฉ ุงูุญุงูุฉ
//  ุฎุทูุงุช ุงูุฅุตูุงุญ
// ุงุฌุนู LayoutService ูุณุคูููุง ุนู ุงูุชุญูู ูู ุญุงูุฉ isActive ู isCollapsed
// ุงุณุชุฎุฏู LayoutService ุฏุงุฎู HeaderComponent ู SidebarComponent ุจุฏููุง ูู MediaMatcher ูู ูู ูุงุญุฏ ููููุง
// ุชุฃูุฏ ูู ุฃู toggleSidebar() ูุบููุฑ ุงูุญุงูุฉ ุนุงููููุง ุจุญูุซ ูุชู ุฅุฎูุงุก ุงูุณูุฏุจุงุฑ ุนูู ุงูุดุงุดุงุช ุงูุตุบูุฑุฉ ุชููุงุฆููุง.





// ุนูุฏ ุชุญููู ุงูุตูุญุฉุ ูุชู ุชูุนูู ุงูุณูุฏุจุงุฑ ููุท ูู ุงูุดุงุดุงุช ุงููุจูุฑุฉ.
// ุนูุฏ ุชุตุบูุฑ ุงูุดุงุดุฉุ ูุชู ุฅุฎูุงุก ุงูุณูุฏุจุงุฑ ุชููุงุฆููุง.
// ุนูุฏ ุชุบููุฑ ุญุฌู ุงููุงูุฐุฉุ ูุชู ุชุญุฏูุซ ุญุงูุฉ ุงูุณูุฏุจุงุฑ.